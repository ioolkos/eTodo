eTodo:eTodo[a]
eTodoEH:eTodoEH[a]
ePeerEM:ePeerEM[a]
ePeerCircleEH:ePeerCircleEH[a]
ePeerCircle:ePeerCircle[a]
eTodoDB:eTodoDB[a]
ePeerServer:ePeerServer[a]
ePeerEH:ePeerEH[a]
ePeer:ePeer[a]
ePort:ePort[a]
ePortListeneer:ePortListener(Other Peer)[a]
ePort2:ePort(Other Peer)[a]
ePeerProtocol:ePeerProtocol(Other Peer)[a]

eTodo:>ePeerEM.connectToCircle
ePeerEM:>ePeerCircleEH.connectToCircle
ePeerCircleEH:>ePeerCircle.connectToCircle
ePeerCircle:eTodoDB.getConnections()
ePeerCircle:>ePeerServer.connectToPeer(for each connection)
ePeerServer:ePort.start_link(Host, Port)
ePort:ePortListeneer.socket connection
ePortListeneer:ePort2.start_link()
ePeerServer:>ePeer.start
ePeer:ePort.eTodoConnect
ePort:>ePort2.eTodoConnect
(1)ePort2:>ePeerProtocol.eTodoConnect(timestamp)
*1 ePeerProtocol
Receive timestamp 
from other peer. 
Hash own circle password
togheter with received 
timestamp. Return result
and a new timestamp.
timestamp =/= peerTimestamp
*1
(1)ePeerProtocol:>ePort2.hash, peerTimestamp&
ePort2:>ePort.hash, peerTimestamp&
(2)ePeer:ePort.eTodoRegister(hash)
*2 ePeer
Hash own circle password
with timestamp sent in 
eTodoConnect. Check if
result is that same as
the peer returned from
eTodoConnect.

Take timestamp recieved
from eTodoConnect, and hash
it togheter with own
circle password and send it 
with eTodoRegister.
*2
ePort:>ePort2.eTodoRegister(hash)&
(3)ePort2:>ePeerProtocol.eTodoRegister(hash)&
*3 ePeerProtocol
Compare hash received
with eTodoRegister with
own hash result.

If they compare send ok back
to the other peer.
*3
(3)ePeerProtocol:>ePort2.ok&
ePort2:>ePort.ok&
ePeer:>ePeerEM.loggedIn(PeerUser)&
ePeerEM:>eTodo.loggedIn(PeerUser)&

